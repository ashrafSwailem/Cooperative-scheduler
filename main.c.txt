
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdlib.h"
#include "stdio.h"
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

//static n dtask;
/* USER CODE BEGIN PV */

/* USER CODE END PV */
uint32_t mseccs=0;
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

void Init(void)
{

rhead = NULL;
rhead->next =NULL;
rhead->maxSize =0;
dhead = NULL;
dhead->next =NULL;


}

void insertR(n temp){
n curs = rhead;
if (rhead==NULL){
            rhead=temp;
						rhead->next=NULL;
    }
    else{
        while((curs!=NULL) && (curs->maxSize<8)){
         if (rhead->priority < temp->priority)
         {
             temp->next = rhead;
             rhead = temp;
					   rhead->maxSize = rhead->maxSize +1;
             break;
         }
         else if ((curs->next->priority) < (temp->priority))
         {
           temp->next = curs->next;
           curs->next = temp;
					 rhead->maxSize = rhead->maxSize +1;
                break;
         }
          
         else if (curs->next == NULL){
           curs->next = temp;
					 rhead->maxSize = rhead->maxSize +1;
                break;
         }
         curs = curs->next;
				
        }

    }
}
void insertD(n temp){
n curs = dhead;
if (dhead==NULL){
            dhead=temp;
    }
    else{
        while(curs!=NULL){
         if (dhead->delay < temp->delay)
         {
           temp->next = dhead;
             dhead = temp;
             break;
         }
         else if (curs->next->delay < temp->delay)
         {
                temp->next = curs->next;
              curs->next = temp;
                break;
         }
          
         else if (curs->next == NULL){
              curs->next = temp;
                break;
         }
         curs = curs->next;
        }
    }
}

void QueTask(void (*tFun)(void), int priority){

HAL_UART_Transmit(&huart2, (uint8_t*)"Queued ",sizeof("Queued "),200);


	n temp = (n)malloc(sizeof(struct node));
    temp->tFun = tFun;
    temp->priority = priority;
    temp->next = NULL;
	 if (tFun == &TaskC){HAL_UART_Transmit(&huart2, (uint8_t*)"ASHRAFDEBUG9 ",sizeof("ASHRAFDEBUG9 "),200);}
    insertR(temp);
	  temp = (n)realloc(temp,sizeof(struct node));
 }

    


void QueDelay(n nodeDelay){

  n temp = (n)malloc(sizeof(struct node));
  temp->tFun = nodeDelay->tFun;
    temp->priority = nodeDelay->priority;
    temp->delay = nodeDelay->delay;
    temp->next = NULL;
    insertD(temp);
    temp = (n)realloc(temp,sizeof(struct node));
}

void DecrementDelay(void){

n curs = dhead;

    while(curs!=NULL)
    {
       curs->delay = ((curs->delay) - 1);
        if (curs->delay == 0)
				{
					  
            QueTask(curs->tFun,curs->priority);
					  dhead = dhead->next;
					  
				}
			curs = curs->next;
    }
}

void Dispatch(){




if (rhead!=NULL){
curtask = rhead;
rhead = rhead->next;
curtask->tFun();
rhead->maxSize = rhead->maxSize -1;
}

//free(curtask);



}

void ReRunMe(int delay){
    
    curtask-> delay = delay;
    QueDelay(curtask);
}
void TaskA(){

// do something here
     HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
		 HAL_Delay(200);
		 HAL_UART_Transmit(&huart2, (uint8_t*)"Hi From Task_A ",sizeof("Hi From Task_A "),200);
    QueTask(&TaskB ,8);
     ReRunMe(10);
// Rerun again after 10 ticks (500 msec)
}
void TaskB(){

// do something here
     HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
		 HAL_Delay(200);
		 HAL_UART_Transmit(&huart2, (uint8_t*)"Hi From Task_B ",sizeof("Hi From Task_B "),200);
    QueTask(&TaskA ,4);
	  //DecrementDelay();
  //  ReRunMe(3);
// Rerun again after 10 ticks (500 msec)
 
}
void TaskC(){


// do something here
     HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
		 HAL_Delay(200);
		 HAL_UART_Transmit(&huart2, (uint8_t*)"Hi From Task_C\n",sizeof("Hi From Task_C\n"),200);
  //  ReRunMe(4);
// Rerun again after 10 ticks (500 msec)
}
void SysTick_Handler(void)
{
  \
	mseccs++;
	if(mseccs%50==0) 
	{
		DecrementDelay();
		mseccs=0;
	}
   HAL_IncTick();
	
}
int main(void)
{


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  
	Init();


	QueTask(&TaskA,7);
	
  while (1)
  {
		
    Dispatch();
	
 }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }


}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		//Dispatch();
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
